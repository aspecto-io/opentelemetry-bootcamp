version: '3'

services:
  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
      - "9300:9300"
  prometheus:
    image: prom/prometheus
    volumes: 
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
    ports: 
      - 9090:9090
  redis:
    image: redis
    ports:
      - 6379:6379
  jaeger:
    image: jaegertracing/all-in-one
    environment:
     - SPAN_STORAGE_TYPE=elasticsearch
     - ES_SERVER_URLS=http://elastic:9200
    ports: 
      - 5775:5775
      - 6831:6831
      - 6832:6832
      - 5778:5778
      - 16686:16686
      - 14268:14268
      - 14250:14250
      - 9411:9411
    deploy:
      restart_policy: # bad workaround, just to simplify the demo.
        condition: on-failure

  collector-agent:
    image: otel/opentelemetry-collector:0.29.0
    volumes: 
      - ./config/collector-agent.yml:/etc/otel-collector-config.yaml
    command: ["--config=/etc/otel-collector-config.yaml"]
    ports:
      # - "1888:1888"   # pprof extension
      # - "8888:8888"   # Prometheus metrics exposed by the collector
      # - "8889:8889"   # Prometheus exporter metrics
      # - "13133:13133" # health_check extension
      - "4318:4318"        # OTLP HTTP receiver
      # - "55670:55679" # zpages extension

  collector-gateway:
    image: otel/opentelemetry-collector-contrib:0.29.0
    volumes: 
      - ./config/collector-gateway.yml:/etc/otel-collector-config.yaml
    command: ["--config=/etc/otel-collector-config.yaml"]
    ports:
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4319:4319"   # OTLP HTTP receiver
      - "4320:4320"   # OTLP gRPC receiver
      - "55670:55679" # zpages extension



    



